{
  "title": {
    "text": "RFC 8650: Dynamic Subscription to YANG Events and Datastores over RESTCONF",
    "zh-CHS": "RFC 8650"
  },
  "number": 8650,
  "created_at": "2023-02-21 22:39:36.445314+08:00",
  "updated_by": "",
  "contents": [
    {
      "indent": 0,
      "text": "This document provides a RESTCONF binding to the dynamic subscription\n      capability of both subscribed notifications and YANG-Push.\n            This is an Internet Standards Track document.\n            This document is a product of the Internet Engineering Task Force\n            (IETF).  It represents the consensus of the IETF community.  It has\n            received public review and has been approved for publication by\n            the Internet Engineering Steering Group (IESG).  Further\n            information on Internet Standards is available in Section 2 of \n            RFC 7841.\n            Information about the current status of this document, any\n            errata, and how to provide feedback on it may be obtained at\n\n            Copyright (c) 2019 IETF Trust and the persons identified as the\n            document authors. All rights reserved.\n            This document is subject to BCP 78 and the IETF Trust's Legal\n            Provisions Relating to IETF Documents\n            () in effect on the date of\n            publication of this document. Please review these documents\n            carefully, as they describe your rights and restrictions with\n            respect to this document. Code Components extracted from this\n            document must include Simplified BSD License text as described in\n            Section 4.e of the Trust Legal Provisions and are provided without\n            warranty as described in the Simplified BSD License.Mechanisms to support event subscription and YANG-Push are defined in . Enhancements to  that enable YANG datastore subscription and YANG-Push are defined in . \nThis document provides a transport specification for dynamic subscriptions over RESTCONF The streaming of notifications that encapsulate the resulting information push is done via the mechanism described in \n    The key words \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\",\n    \"\", and \"\" in this document are to be interpreted as\n    described in BCPÂ 14   \n    when, and only when, they appear in all capitals, as shown here.The following terms use the definitions from Other terms reused include datastore, which is defined in This section provides specifics on how to establish and maintain dynamic subscriptions over RESTCONF As described in , a GET needs to be performed on a\n      specific URI on the publisher. Subscribers cannot predetermine the URI\n      against which a subscription might exist on a publisher, as the URI will\n      only exist after the \"establish-subscription\" RPC has been\n      accepted. Therefore, the POST for the \"establish-subscription\" RPC\n      replaces the GET request for the \"location\" leaf that is used in  to obtain the URI. The subscription\n      URI will be determined and sent as part of the response to the\n      \"establish-subscription\" RPC, and a subsequent GET to this URI will be\n      done in order to start the flow of notification messages back to the\n      subscriber.  As specified in , a subscription does not move to the active state\n      until the GET is received.For a dynamic subscription, when a RESTCONF session doesn't already exist, a new RESTCONF session is initiated from the subscriber.As stated in Without the involvement of additional protocols, HTTP sessions by\n   themselves do not support quick recognition of the loss of the\n   communication path to the publisher. Where quick recognition of the loss of a publisher is required, a subscriber  use a TLS heartbeat Loss of the heartbeat  result in the teardown\nof any subscription-related TCP sessions between those endpoints.  \nA subscriber can then attempt to re-establish the dynamic subscription by using the procedure described in Subscribers can learn which event streams a RESTCONF server supports by querying the \"streams\" container of ietf-subscribed-notifications.yang in Subscribers can learn which datastores a RESTCONF server supports by following Specific HTTP response codes as defined in If a publisher fails to serve the RPC request for one of the reasons indicated in When an HTTP error code is returned, the RPC reply  include \nan <rpc-error> element per  \nwith the following parameter values:Each error identity will be inserted as the \"error-app-tag\" using JSON encoding following the form <modulename>:<identityname>.  An example of such a valid encoding would be \"ietf-subscribed-notifications:no-such-subscription\".In the case of error responses to an \"establish-subscription\" or\n \"modify-subscription\" request, there is the option to include an\n \"error-info\" node.  This node may contain hints for parameter settings\n that might lead to successful RPC requests in the future. Tables The yang-data included within \"error-info\"  include the\n      optional leaf \"reason\", as such a leaf would be redundant\n      with information that is already placed within the\n      \"error-app-tag\".In case of an <rpc-error> as a result of a \"delete-subscription\", a\n      \"kill-subscription\", or a \"resync-subscription\" request, no\n      \"error-info\" needs to be included, as the \"subscription-id\" is\n      the only RPC input parameter, and no hints regarding this RPC input\n      parameters need to be provided.Note that \"error-path\" The call flow for Server-Sent Events (SSE) is defined in Figure 1.  The logical connections denoted\n by (a) and (b) can be a TCP connection or an HTTP/2 stream (if HTTP/2\n is used, multiple HTTP/2 streams can be carried in one TCP\n connection). Requests to RPCs as defined in  or  are\n sent on a connection indicated by (a).  A successful\n \"establish-subscription\" will result in an RPC response returned with\n both a subscription identifier that uniquely identifies a\n subscription, as well as a URI that uniquely identifies the location\n of subscription on the publisher (b). This URI is defined via the\n \"uri\" leaf in the data model in An HTTP GET is then sent on a separate logical connection (b) to the URI on the publisher.  This signals the publisher to initiate the flow of notification messages that are sent in SSE As described in Additional requirements for dynamic subscriptions over SSE include:A publisher  terminate a subscription in the following cases:A publisher  terminate a subscription at any time as stated in Qos treatment for event streams is described in For dynamic subscriptions with the same Differentiated Services Code Point (DSCP) value to a specific publisher, it is recommended that the subscriber sends all URI GET requests on a common HTTP/2 session (if HTTP/2 is used). Conversely, a subscriber cannot use a common HTTP/2 session for subscriptions with different DSCP values.Notification messages transported over RESTCONF will be encoded according to  The YANG module defined in This module references \n      This document registers the following namespace URI in the \"ns\"\n      subregistry of the \"IETF XML Registry\" \n      This document registers the following YANG module in the \"YANG Module\n      Names\" registry The YANG module specified in this document defines a schema for data that is designed to be accessed via network management transports such as NETCONF The Network Configuration Access Control Model (NACM)  \n    provides the means to restrict access for particular NETCONF or \n    RESTCONF users to a preconfigured subset of all available NETCONF \n    or RESTCONF protocol operations and content.The one new data node introduced in this YANG module may be considered sensitive or vulnerable in some network environments.  It is thus important to control read access (e.g., via get, get-config, or notification) to this data node.  These are the subtrees and data nodes and their sensitivity/vulnerability:Container: \"/subscriptions\"The subscription URI is implementation specific and is encrypted via the use of TLS. Therefore, even if an attacker succeeds in guessing the subscription URI, a RESTCONF username The access permission considerations for the RPCs \"modify-subscription\", \"resync-subscription\", \"delete-subscription\", and \"kill-subscription\" are described in If a buggy or compromised RESTCONF subscriber sends a number of \"establish-subscription\" requests, then these subscriptions accumulate and may\n    use up system resources.  In such a situation, the publisher  also suspend or terminate a subset of the active\n    subscriptions from that RESTCONF subscriber in order to reclaim resources and preserve normal operation for the other subscriptions.This section is non-normative.  To allow easy comparison, this section mirrors the functional examples shown with NETCONF over XML within The subscription URI values used in the examples in this section are purely illustrative, and are not indicative of the expected usage that is described in The DSCP values are only for example purposes and are all indicated in decimal since the encoding is JSON The following figure shows two successful\n   \"establish-subscription\" RPC requests as per .  The first request is given a subscription\n   identifier of 22, and the second, an identifier of 23.To provide examples of the information being transported, example messages for interactions in  As the publisher was able to fully satisfy the request, the publisher sends the subscription identifier of the accepted subscription and the URI:Upon receipt of the successful response, the subscriber does a\n   GET to the provided URI to start the flow of notification messages.\n   When the publisher receives this, the subscription is moved to the\n   active state (c).While not shown in The subscriber can use this information in future attempts to establish a subscription.An existing subscription may be modified.  The following exchange shows a negotiation of such a modification via several exchanges between a subscriber and a publisher.  This negotiation consists of a failed RPC modification request/response followed by a successful one.If the subscription being modified in If the publisher can satisfy both changes, the publisher sends a positive result for the RPC. If the publisher cannot satisfy either of the proposed changes, the publisher sends an RPC error response (e).  The following is an example RPC error response for (e) that includes a hint. This hint is an alternative time period value that might have resulted in a successful modification:The following demonstrates deleting a subscription.  This subscription may have been to either a stream or a datastore.If the publisher can satisfy the request, the publisher replies with success to the RPC request.If the publisher cannot satisfy the request, the publisher sends\n   an <rpc-error> element indicating the modification didn't work. Figure 11 shows a valid\n   response for an existing valid subscription identifier, but that subscription identifier was created on a different transport session:A publisher will send subscription state notifications according to the definitions within A \"subscription-modified\" encoded in JSON would look like:A \"subscription-completed\" notification would look like:The \"subscription-resumed\" and \"replay-complete\" are virtually identical, with \"subscription-completed\" simply being replaced by \"subscription-resumed\" and \"replay-complete\".A \"subscription-terminated\" would look like:The \"subscription-suspended\" is virtually identical, with \"subscription-terminated\" simply being replaced by \"subscription-suspended\".This section provides an example that illustrates the method of filtering event record contents.  The example is based on the YANG notification \"vrrp-protocol-error-event\" as defined per the ietf-vrrp.yang module within Suppose a subscriber wanted to establish a subscription that only passes instances of event records where there is a \"checksum-error\" as part of a Virtual Router Redundancy Protocol (VRRP) protocol event.  Also assume the publisher places such event records into the NETCONF stream.  To get a continuous series of matching event records, the subscriber might request the application of an XPath filter against the NETCONF stream.  An \"establish-subscription\" RPC to meet this objective might be:For more examples of XPath filters, see Suppose the \"establish-subscription\" in For more examples of subtree filters, see We wish to acknowledge the helpful contributions, comments, and suggestions that were received from Ambika Prasad Tripathy, Alberto Gonzalez Prieto, Susan Hares, Tim Jenkins, Balazs Lengyel, Kent Watsen, Michael Scharf, Guangying Zheng, Martin Bjorklund, Qin Wu, and Robert Wilton.",
      "raw": true,
      "zh-CHS": " "
    }
  ]
}